Aktivitelerde lifecycle süreci için 6 temel callback bulunur.
Bunlar;
1-) onCreate(), 
2-) onStart(), 
3-) onResume(), 
4-) onPause(), 
5-) onStop(), 
6-) onDestroy()

Her aktivite açılışında(yeni bir state durumunda) sistem bu callbacklerden birini çağırır.

1-) onCreate()

Bu methodun çağırılması şart. Bu yazılmadan teknik olarak activity oluşturulamaz. 
Aktivite oluştuğunda(launch edildiğinde) ilk bu method çağrılır. onStop() sonrasında yeniden
yaratım, yani onCreate süreci gerekli olduğundan arka arkaya gelirler.

Örnek:

class MainActivity : AppCompatActivity() {

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)
    }



2-) onStart()

Aktivite oluştuktan sonra kullanıcıya görünür olan süreç burada başlar. onRestart() methodu
çalıştıktan sonra yenileme süreci onCreate ile değil(burada uygulama yeniden ayağa kalkıyor çünkü)
onStart ile başlar.

3-) onResume()

Arka plana atılan uygulama/activity sonrasında ön plana alınma işlemi gerçekleştiğinde
bu method çalışır ya da çalışabilir. Kamerayı aktif tutmak, gps ile lokasyon tutma gibi 
işlemlerde kritik diyebileceğimiz bir lifecycle aşamasıdır. onPause sonrası bu lifecycle 
zincirinin bu halkası çalışır.

Örnek:

class CameraComponent : LifecycleObserver {

    ...

    @OnLifecycleEvent(Lifecycle.Event.ON_RESUME)
    fun initializeCamera() {
        if (camera == null) {
            getCamera()
        }
    }

    ...
}


4-) onPause()

Activity/Uygulama arka plandayken bu method çağrılır. Yine yukarıdaki gibi gps, kamera vs.
işlemleri için önemli yer teşkil ederdi fakat kısa süreli bir süreç gerektirdiğinden,
yerini onPause() methoduna bırakmıştır. Kısa süreli işlemler için kullanılabilir.

Örnek:

class CameraComponent : LifecycleObserver {

    ...

    @OnLifecycleEvent(Lifecycle.Event.ON_PAUSE)
    fun releaseCamera() {
        camera?.release()
        camera = null
    }

    ...
}



5-) onStop()

İşlemci, bellek gibi tasarruf edilmesi gereken donanım ve özellikler için doğru şekilde 
kullanılmalıdır. Bu sayede uygulamanın optimizasyon ve performans açısından kalitesini 
arttırır. onPause'un aksine aktivite uzun süredir sistemde kalmıyorsa kullanılır. onRestart
ile onStart() halkasına dönme imkanı verir.

-onPause ve onStop sonrası onCreated ile yeniden lifecycle süreci başlatılabilir. onPause
ile onResume callback'i de çağrılabilir.

6-) onDestroy()

Aktiviteyle iş bittiğinde kapatmaya yarar. Belleği temizler ve activity kapatılır. finish()
methoduyla kullanılabilir. splash screen ya da bir daha girmeyeceğimiz login ekranları gibi
yerlerde kullanılır. Data ile çok fazla uğraşılmaz(kaydetme işlemi özellikle). Çünkü aktivite
kapandıktan sonra bilgiler uçacaktır.


Uygulama açık iken bazı Senaryolar
Uygulama açıldığında

onCreate() –> onStart() –> onResume()

Geri tuşuna basıldığında

onBackPressed() –> onPaused() –> onStop() –> onDestroy()

Home tuşuna basıldığında

onPaused() –> onStop()

Home tuşuna basıp son uygulamalardan açtığımızda veya uygulamamızın ikonuna basarak açtığımızda

onRestart() –> onStart() –> onResume()

Üst bildirim ekranından başka bir uygulama açtığımızda veya ayarları açtığımızda

onPaused() –> onStop()

Başka bir uygulamada isek geri butonuna bastığımızda veya ayarlarda isek geri butonuna bastığımızda

onRestart() –> onStart() –> onResume()

Ekranda herhangi bir dialog ekranı açıldığında

onPause()

Dialog ekranını kapattığımızda veya geri tuşuna bastığımızda

onResume()

Telefon ekranı kapandığında

onPaused() –> onStop()

Telefon ekranı tekrar açıldığında

onRestart() –> onStart() –> onResume()

Telefonu döndürdüğümüzde (yatay )

onPause() –> onStop() –> onSaveInstance() –> onDestroy()

Telefonu dikey ‘e tekrar döndürürsek

onCreate() –> onStart() –> onRestoreIntanceState() –> onResume()


* Bu 6 temel callback, aktivitedeki lifecycle süreçlerini temsil eder. Launch ve shut down
aşamalarına kadar kullanıcıya eşlik etmekle birlikte yönetim süreçleri bundan ibaret değildir.


OnContentChanged
Uygulamanın içerik görünümü değişince bu method çağırılır.Ayrıca NotifyDataSetChanged, 
SetContentView, AddContentView bu değişime neden olur.


OnRestoreInstanceState
OnRestoreInstanceState, OnStarttan sonra çağrıldığı faaliyetin yaşam döngüsünde de boş 
olmayan bir Bundle nesnesi almanızı garanti eder. Ama OnCreate: Bundle nesnesinin null 
olup olmadığını her zaman kontrol etmelisiniz.


OnSaveInstanceState
OnPause,OnStop methodunu hatırlayalım arkaplana alınınca bellek yetersiz olunca ne 
yapıyordu activity’i yok ediyordu işte bu method şu işimize yarıyor eğer ki siz yok 
olmadan önceki bilgileri bellekte tutmak istiyorsanız bu methodu kullanmanız gerekmektedir.


OnCreateOptionsMenu
Seçenekler menusu ilk kez görüntülendiğinde çağrılır.Yeni menu tanımlamaları yapabilirsiniz.


OnUserInteraction
Kullanıcı ekrana dokunduğunda herhangi bir işlem için bu method çalışır.


OnUserLeaveHint
Örneğin, kullanıcı Ana Ekran tuşuna bastığında, OnUserLeaveHint mehodu çağrılır,ancak gelen 
bir telefon görüşmesi vb. durumlarda,OnUserLeaveHint, kesintiye uğrayan etkinlikte 
çağrılmaz. Activity arka plana alınırken,eğer bu bir kullanıcı seçimiyse OnPause methodu 
çağrılmadan hemen önce OnUserLeaveHint çağrılır.


OnActivityResult
Kullanıcı sonraki activitty ile işini bitirip geri döndüğünde, sistem etkinliğinizin 
OnActivityResult yöntemini çağırır. Bu yöntem üç argüman içerir:

StartActivityForResult öğesine ilettiğiniz request kodu.
İkinci activity tarafından belirtilen bir result kodu. Bu, işlemin başarılı olması durumunda
RESULT_OK veya kullanıcı geri çekilirse veya işlem bir nedenden dolayı başarısız olursa 
RESULT_CANCELED olur.3.parametremizde transfer edilen data parametremizdir.


OnBackPressed
Kullanıcının geri tuşuna bastığında çağrılır. Varsayılan uygulama yalnızca mevcut 
activity’i tamamlar, ancak istediğiniz şeyi yapmak için ön tanımlı methodu override 
edebilirsiniz.


Fragment'ta Lifecycle:


OnAttachFragment

Bir Fragment bu fragment’in çocuğu olarak eklendiğinde çağrılır. Bu, ekli Fragment’ın 
OnAttach’tan ve ekli parçanın OnCreate’ından önce, eğer parça OnCreate’a önceden bir çağrı 
yapmamışsa çağrılır.



OnCreateView

Fragment’in UI kısmını başlatması için çağrılır. Bu isteğe bağlıdır ve grafiksel olmayan 
parçalar boş değer döndürür. Lifecycle’da gördüğünüz üzere methodumuz OnCreate ve 
OnActivityCreated arasında çağrılacak.


Bu methodlara dair örnek kod parçası:


class MainActivity : AppCompatActivity() {

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        "onCreateBeforeContentView".logError()

        setContentView(R.layout.activity_main)

        "onCreateAfterContentView".logError()


    }

    override fun onStart() {
        super.onStart()

        "onStart".logError()
    }

    override fun onRestart() {
        super.onRestart()

        "onRestart".logError()
    }

    override fun onResume() {
        super.onResume()

        "onResume".logError()
    }

    override fun onPause() {
        super.onPause()

        "onPause".logError()
    }

    override fun onDestroy() {
        super.onDestroy()

        "onDestroy".logError()
    }

    override fun onStop() {
        super.onStop()

        "onStop".logError()
    }

    override fun onContentChanged() {
        super.onContentChanged()

        "onContentChanged".logError()
    }

    override fun onBackPressed() {
        super.onBackPressed()

        "onBackPressed".logError()
    }

    override fun onOptionsItemSelected(item: MenuItem): Boolean {
        "onOptionsItemSelected".logError()

        return super.onOptionsItemSelected(item)
    }

    override fun onOptionsMenuClosed(menu: Menu?) {
        super.onOptionsMenuClosed(menu)

        "onOptionsMenuClosed".logError()
    }

    override fun onCreateOptionsMenu(menu: Menu?): Boolean {
        "onCreateOptionsMenu".logError()

        return super.onCreateOptionsMenu(menu)
    }

    override fun onPrepareOptionsMenu(menu: Menu?): Boolean {
        "onPrepareOptionsMenu".logError()

        return super.onPrepareOptionsMenu(menu)
    }

    override fun onRestoreInstanceState(savedInstanceState: Bundle) {
        super.onRestoreInstanceState(savedInstanceState)

        "onRestoreInstanceState".logError()
    }

    override fun onSaveInstanceState(outState: Bundle) {
        super.onSaveInstanceState(outState)

        "onSaveInstanceState".logError()
    }

    override fun onConfigurationChanged(newConfig: Configuration) {
        super.onConfigurationChanged(newConfig)

        "onConfigurationChanged".logError()
    }

    override fun startActivityForResult(intent: Intent?, requestCode: Int) {
        super.startActivityForResult(intent, requestCode)

        "startActivityForResult".logError()
    }

    override fun onUserInteraction() {
        super.onUserInteraction()

        "onUserInteraction".logError()
    }

}

Android LifeCycle Problemleri?

Android Yaşam döngüsü geliştiricileri temelde kusurlu bir tasarıma yönlendirir.
Başlangıçta, Square gibi geliştiriciler, Activity yaşam döngüsüyle ilgili sorunlara 
atfedilen zorlukları ve zorlu hataları fark ettiler. Yıllar geçtikçe, Etkinlik yaşam 
döngüsünün, Google'ın Uygulama Mimarisini tam olarak anlamadan önce tasarlandığı ortaya çıktı.

Buradaki temel mimari sorun, geliştiriciler bir etkinliği, Depolama gibi işlemlerin kullanım 
ömrüne göre belirlenen nesnelerle bağlandığında ortaya çıkar. Şu anda oturum açmış olan kullanıcı 
için bir Profil nesnesinin varlığına bağlı olarak farklı bir görünüm çizmek tercih sebebi olabilir. 
Örneğin, bir kullanıcı adını oluşturan görünüm. Bir Profil nesnesi Aktiviteye değil, Uygulamaya 
bağlı bir yaşam döngüsüne sahip bir Depo tarafından sağlanacağından, geliştirici olarak bir Depo 
başlatıldığında(ve dolayısıyla bir Profil kullanılabilir hale geldiğinde) Aktivite yaşam döngünüzün 
ortasında ne olacağını düşünmelisiniz.  


Uygulama kapsamındaki verilerin ne zaman kullanılabilir olduğuna ilişkin belirsizlik, Görünümlerinizi 
ne zaman ve nasıl başlattığınızı ve RxJava streams subscription'ı, LiveData'yı vs. ne zaman 
ve nasıl başlatacağınızı etkiler.


Android yaşam döngüsü yöntemleri hiçbir zaman Temiz MVVM mimarisi için tasarlanmamıştır. Clean MVVM 
mimarisi, yaşam döngüsü olarak adlandırdığımız kendi özel lifecycle'ımız için bir giriş noktası 
olmaktan başka bir şey için kullanılmıyor.

Subscriptions'ı başlatmamız, onCreate() veya onStart() içinde kurmamız gerçekten önemli mi? Kullanıcı 
deneyimi aynı değil mi? Kesinlikle hayır. Android processlerin ölümü gibi durumlar nedeniyle, 
uygulama kapsamlı verilere (yani, Activityler arasında paylaşılan ve uygulama kapsamlı yaşam döngüsüne 
sahip bir nesneye eklenmiş veriler) erişerek görünümleri yapılandırmaya çalışırsanız, sonunda 
NullPointerException ile karşılaşırsınız ve uygulamanız çöker. 


Clean MVVM Activity Lifecycle

Bir MVVM mimarisiyle çalışan her Android geliştiricisi, görünümleri ve abonelikleri nasıl ve ne zaman 
yapılandıracağı konusunda seçim yapmakla karşı karşıyadır. Bunu yanlış yapıldığında  
NullPointerExceptions ile karşılaşılır.

Bu sonuçlardan kaçınmak, kodunuzu basitleştirmek ve mimarinizi düzene sokmak için clean MVVM activity 
Yaşam Döngüsü adı verilen Activity ve Fragment lifecycle geliştildi.

Bu yaşam döngüsü, onCreate() ve onResume() arasında standart Android Activity yaşam döngüsünün yanında
etkinlik gösterir.

Bir developer olarak, neredeyse her zaman tamamlamak istediğimiz iki temel işlev ve duymak istediğimiz 
bir temel olay vardır:

*View'ların kurulumu ve özelleştirilmesi,
*İster RxJava ister LiveData olsun, activity streamer'larına abone olunması,
*Kurulum işleminin ne zaman %100 tamamlandığının bilinmesi.

onSetupViews() 

Bu, özel olarak uygulanan Clean MVVM yaşam döngüsü yöntemlerinin ilkidir. OnCreate() değil!


onSetupLiveDataEventSubscriptions()

Burada, çoğu durumda ViewModel'de depolanan state değişikliği subscribe'ı olan LiveData 
abonelikleri ayarlanır.


onInitializationComplete() 

Bu yöntemin yalnızca repository'nin başlatılması tamamlandıktan, görünüm ve aboneliklerimiz ayarlandıktan ve 
Aktivite veya Fragment görünür hale geldikten sonra(yani uygulama arka planda değil) çağrılacağı garanti edilir. 
Deep link veya notification intenti gibi herhangi bir kurulum sonrası işlem buraya yerleştirilebilir.


onStart() / onResume() 
Yukarıda anlatılan yöntemleri kullanıldığında, bu iki yöntemde herhangi bir koda ihtiyaç yoktur. Görünümlere 
hiçbir zaman doğrudan onStart() veya onResume() içinde erişmiyoruz çünkü artık onSetupViews() asenkron olduğundan, 
viewların bu noktada başlatılacağının garantisi yoktur.

Not:
Aktivite ve Fragment lifeCycyleları farklı callbacklere sahip olabilseler de aynı kural ve kalıplara dahildirler.



Kaynak:

https://umiitkose.com/2020/02/android-activity-lifecycle/
https://developer.android.com/guide/components/activities/activity-lifecycle
https://proandroiddev.com/android-activity-lifecycle-considered-harmful-98a5b00d287
https://medium.com/p/56baf8b19078
